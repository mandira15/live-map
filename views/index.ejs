<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-Time Device Tracker</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"
      integrity="sha512-h9FcoyWjHcOcmEVkxOfTLnmZFWIH0iZhZT1H2TbOq55xssQGEJHEaIm+PgoUaZbRvQTNTluNOEfb1ZRy6D3BOw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <style>
      #map {
        height: 100vh;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script src="/socket.io/socket.io.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet-src.min.js"
      integrity="sha512-3/WyQrhTdqSVmSifQS62akgtNBhZha2lS44TnoN9Jk3J01FvsKK4suVmz6t5FtccGb5iJw58GoFhBjPE5EPc8Q=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
     <script>
      const socket = io();
      let lastLatitude = null;
      let lastLongitude = null;
      let lastUpdateTime = null;
      let timer = null;
      const tolerance = 0.00001
      if (navigator.geolocation) {
        navigator.geolocation.watchPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            const isSameLocation = 
          lastLatitude !== null && 
          lastLongitude !== null && 
          Math.abs(latitude - lastLatitude) < tolerance && 
          Math.abs(longitude - lastLongitude) < tolerance;
          console.log(isSameLocation);
          
        if (isSameLocation) {

          // If location hasn't changed, start a timer (if it hasn't already been started)
          if (!timer) {
            timer = setTimeout(() => {
              alert("Warning! Location hasn't changed for 30 seconds!");
            }, 29000);
          }
        } else {
          // If location has changed, clear the timer and reset coordinates
          if (timer) {
            clearTimeout(timer);
            timer = null;  // Reset the timer to prevent multiple alerts
          }

          // Update last known latitude and longitude
          lastLatitude = latitude;
          lastLongitude = longitude;
        }
            socket.emit("send-location", { latitude, longitude });
          },
          (error) => {
            console.error(error);
          }
        ),
          {
            enableHighAccuracy: true,
            timeout: 5000,
            maximumAge: 0,
          };
      }

      const map = L.map("map").setView([0, 0], 16);
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "map",
      }).addTo(map);
      const markers = {};

      socket.on("receive-location", (data) => {
        const { id, latitude, longitude } = data;
        map.setView([latitude, longitude]);
        if (markers[id]) {
          markers[id].setLatLng([latitude, longitude]);
        } else {
          markers[id] = L.marker([latitude, longitude]).addTo(map);
        }
      });
      socket.on("user-disconnected", (id) => {
        if (markers[id]) {
          map.removeLayer(markers[id]);
          delete markers[id];
        }
      });
    </script>
  </body>
</html>
